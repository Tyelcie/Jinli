})
})
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates)
observeEvent(input$new,{
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
output$results <- renderPlot({
plot.new()
text(0.5,0.5,temp$Phone,cex = 3)
})
})
}
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
mainPanel(
actionButton('new', 'new'),
plotOutput('results')
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates)
observeEvent(input$new,{
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
output$results <- renderPlot({
plot.new()
text(0.5,0.5,temp$Phone,cex = 3)
})
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list(pagelength = 10))
observeEvent(input$new,{
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
output$results <- renderPlot({
plot.new()
text(0.5,0.5,temp$Phone,cex = 3)
})
})
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
observeEvent(input$new,{
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
output$results <- renderPlot({
plot.new()
text(0.5,0.5,temp$Phone,cex = 3)
})
})
}
shinyApp(ui = ui, server = server)
candidates$Phone <- sapply(candidates$Phone, substr(x, 4, 7) <- '****')
candidates$Phone <- sapply(candidates$Phone, function(x) substr(x, 4, 7) <- '****')
View(candidates)
candidates <- data.frame(ID = c(1:800),
Name = sample(LETTERS, 800, replace = T),
Phone = str_pad(sample(1:800, 800), width = 11, pad = '0'),
stringsAsFactors = F)
substr(candidates$Phone, 4, 7) <- '****'
View(candidates)
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
mainPanel(
actionButton('new', 'new'),
plotOutput('results')
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
observeEvent(input$new,{
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
output$results <- renderPlot({
plot.new()
text(0.5,0.5,temp$Phone,cex = 3)
})
})
}
shinyApp(ui = ui, server = server)
candidates <- candidates[-id,]
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
mainPanel(
actionButton('new', 'new'),
actionButton('refresh', 'refresh'),
plotOutput('results')
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
candidates <- candidates[-id,]
output$results <- renderPlot({
plot.new()
text(0.5,0.5,temp$Phone,cex = 3)
})
})
observeEvent(input$refresh, {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
})
}
shinyApp(ui = ui, server = server)
library(shiny)
source('helper.R')
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
mainPanel(
actionButton('new', 'new'),
actionButton('refresh', 'refresh'),
plotOutput('results')
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
candidates <- candidates[-id,]
output$results <- renderPlot({
plot.new()
text(0.5,0.5,temp$Phone,cex = 3)
})
})
observeEvent(input$refresh, {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
candidates <- candidates[-id,]
output$results <- renderPlot({
plot.new()
text(0.5,0.5,temp$Phone,cex = 3)
})
})
observeEvent(input$refresh, {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
})
}
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
mainPanel(
actionButton('new', 'new'),
actionButton('refresh', 'refresh'),
plotOutput('results')
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
candidates <- candidates[-id,]
output$results <- renderPlot({
plot.new()
text(0.5,0.5,temp$Phone,cex = 3)
})
})
observeEvent(input$refresh, {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
})
}
shinyApp(ui = ui, server = server)
source('helper.R')
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
mainPanel(
actionButton('new', 'new'),
actionButton('refresh', 'refresh'),
plotOutput('results')
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
candidates <- candidates[-id,]
output$results <- renderPlot({
plot.new()
text(0.5,0.5,temp$Phone,cex = 3)
})
})
observeEvent(input$refresh, {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
})
}
shinyApp(ui = ui, server = server)
# input fields are treated as a group
formData <- reactive({
sapply(names(GetTableMetadata()$fields), function(x) input[[x]])
})
source('helper.R')
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
output$results <- renderPlot({
plot.new()
text(0.5,0.5,temp$Phone,cex = 3)
})
})
observeEvent(input$new, {
deletd
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
output$results <- renderPlot({
plot.new()
text(0.5,0.5,temp$Phone,cex = 3)
})
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
output$results <- renderPlot({
plot.new()
text(0.5,0.5,temp$Phone,cex = 3)
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
source('helper.R')
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
mainPanel(
actionButton('new', 'new'),
actionButton('refresh', 'refresh'),
plotOutput('results')
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
output$results <- renderPlot({
plot.new()
text(0.5,0.5,temp$Phone,cex = 3)
})
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
output$results <- renderPlot({
plot.new()
text(0.5,0.5,temp$Phone,cex = 3)
text(0.5,0.3,temp$ID,cex = 2)
})
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
mainPanel(
actionButton('new', 'new'),
actionButton('refresh', 'refresh'),
plotOutput('results')
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
output$results <- renderPlot({
plot.new()
text(0.5,0.5,paste0('Phone: ', temp$Phone,cex = 3))
text(0.5,0.3,paste0('ID: ', temp$ID,cex = 2))
})
observeEvent(input$refresh,{
session$reload()
})
})
}
shinyApp(ui = ui, server = server)
source('helper.R')
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
mainPanel(
actionButton('new', 'new'),
actionButton('refresh', 'refresh'),
plotOutput('results')
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
output$results <- renderPlot({
plot.new()
text(0.5,0.5,paste0('Phone: ', temp$Phone,cex = 3))
text(0.5,0.3,paste0('ID: ', temp$ID,cex = 2))
})
observeEvent(input$refresh,{
session$reload()
})
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
mainPanel(
actionButton('new', 'new'),
actionButton('refresh', 'refresh'),
plotOutput('results')
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list('form_control input-sm' = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
output$results <- renderPlot({
plot.new()
text(0.5,0.5,paste0('Phone: ', temp$Phone,cex = 3))
text(0.5,0.3,paste0('ID: ', temp$ID,cex = 2))
})
observeEvent(input$refresh,{
session$reload()
})
})
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list(pageLength = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
output$results <- renderPlot({
plot.new()
text(0.5,0.5,paste0('Phone: ', temp$Phone,cex = 3))
text(0.5,0.3,paste0('ID: ', temp$ID,cex = 2))
})
observeEvent(input$refresh,{
session$reload()
})
})
}
shinyApp(ui = ui, server = server)
temp <- candidates[id,]
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
View(temp)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list(pageLength = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
output$results <- renderPlot({
plot.new()
text(0.5,0.5, paste0('Phone: ', temp$Phone, cex = 3))
#text(0.5,0.3, paste0('ID: ', temp$ID, cex = 2))
})
observeEvent(input$refresh,{
session$reload()
})
})
}
shinyApp(ui = ui, server = server)
View(candidates)
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
mainPanel(
actionButton('new', '抽大奖'),
actionButton('refresh', '再来一个'),
plotOutput('results')
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list(pageLength = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
output$results <- renderPlot({
plot.new()
text(0.5,0.5, paste0('Phone: ', temp$Phone, cex = 3))
#text(0.5,0.3, paste0('ID: ', temp$ID, cex = 2))
})
observeEvent(input$refresh,{
session$reload()
})
})
}
shinyApp(ui = ui, server = server)
library(shiny)
library(shiny)
source('helper.R')
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
mainPanel(
actionButton('new', '抽大奖'),
actionButton('refresh', '再来一个'),
plotOutput('results')
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list(pageLength = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
output$results <- renderPlot({
plot.new()
text(0.5,0.5, paste0('Phone: ', temp$Phone, cex = 3))
#text(0.5,0.3, paste0('ID: ', temp$ID, cex = 2))
})
observeEvent(input$refresh,{
session$reload()
})
})
}
shinyApp(ui = ui, server = server)
