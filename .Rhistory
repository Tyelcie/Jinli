candidates <- data.frame(Name = sample(LETTERS, 3, replace = T),
Phone = sample(1:1800), 1800)
View(candidates)
candidates <- data.frame(Name = sample(LETTERS, 1),
Phone = sample(1:1800), 1800)
View(candidates)
candidates <- data.frame(Name = sample(LETTERS, 1),
Phone = sample(1:1800, 1800))
View(candidates)
candidates <- data.frame(Name = sample(LETTERS, 1800, replace = T),
Phone = sample(1:1800, 1800))
install.packages("rmarkdown")
library(shiny)
source('helper.R')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates'),
actionButton('go', 'Go')
),
# Show a plot of the generated distribution
mainPanel(
DT::dataTableOutput('results')
)
)
)
install.packages()
install.packages('DT')
library(shiny)
source('helper.R')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates'),
actionButton('go', 'Go')
),
# Show a plot of the generated distribution
mainPanel(
DT::dataTableOutput('results')
)
)
)
results <- data.frame()
# Define server logic required to draw a histogram
server <- function(input, output, session) {
output$candidates <- DT::renderDataTable(candidates, options = list(pagelength = 10))
observeEvent(input$go, {
output$results <- renderDataTable({
Awards <- candidates[sample(candidates$Phone,1),]
results <- rbind(results,Awards)})
})
results <- results
}
# Run the application
shinyApp(ui = ui, server = server)
awards <- candidates[sample(candidates$Phone),
]
awards <- candidates[sample(candidates$Phone, 1),]
candidates <- candidates[-candidates$Phone == awards$Phone,]
View(awards)
source('helper.R')
candidates <- candidates[-awards$Phone %in%candidates$Phone,]
source('helper.R')
candidates <- candidates[-match(awards$Phone, candidates$Phone),]
source('helper.R')
if(TRUE){
awards <- candidates[sample(candidates$Phone, 1),]
candidates <- candidates[-match(awards$Phone, candidates$Phone),]
results <- rbind(results, awards)
}
if(TRUE){
awards <- candidates[sample(candidates$Phone, 1),]
candidates <- candidates[-match(awards$Phone, candidates$Phone),]
results <- rbind(results, awards)
}
if(TRUE){
awards <- candidates[sample(candidates$Phone, 1),]
candidates <- candidates[-match(awards$Phone, candidates$Phone),]
results <- rbind(results, awards)
}
if(TRUE){
awards <- candidates[sample(candidates$Phone, 1),]
candidates <- candidates[-match(awards$Phone, candidates$Phone),]
results <- rbind(results, awards)
}
if(TRUE){
awards <- candidates[sample(candidates$Phone, 1),]
candidates <- candidates[-match(awards$Phone, candidates$Phone),]
results <- rbind(results, awards)
}
if(TRUE){
awards <- candidates[sample(candidates$Phone, 1),]
candidates <- candidates[-match(awards$Phone, candidates$Phone),]
results <- rbind(results, awards)
}
if(TRUE){
awards <- candidates[sample(candidates$Phone, 1),]
candidates <- candidates[-match(awards$Phone, candidates$Phone),]
results <- rbind(results, awards)
}
if(TRUE){
awards <- candidates[sample(candidates$Phone, 1),]
candidates <- candidates[-match(awards$Phone, candidates$Phone),]
results <- rbind(results, awards)
}
if(TRUE){
awards <- candidates[sample(candidates$Phone, 1),]
candidates <- candidates[-match(awards$Phone, candidates$Phone),]
results <- rbind(results, awards)
}
if(TRUE){
awards <- candidates[sample(candidates$Phone, 1),]
candidates <- candidates[-match(awards$Phone, candidates$Phone),]
results <- rbind(results, awards)
}
if(TRUE){
awards <- candidates[sample(candidates$Phone, 1),]
candidates <- candidates[-match(awards$Phone, candidates$Phone),]
results <- rbind(results, awards)
}
View(results)
duplicated(results$Phone)
awards <- candidates[sample(candidates$Phone, 1),]
awards
match(awards$Phone, candidates$Phone)
candidates[612,]
results <- data.frame(Name = NULL, Phone = NULL)
source('helper.R')
source('helper.R')
for(i in 1:1800){
i
awards <- candidates[sample(candidates$Phone, 1),]
results <- rbind(results, awards)
}
any(duplicated(results$Phone))
library(shiny)
source('helper.R')
# read
# read data from inputs
CastData <- fuction(data){
results <- data.frame(Name = data['Name'],
Phone = data['Phone'])
rownames(results) <- data['id']
return(results)
}
library(shiny)
source('helper.R')
source('helper.R')
# Define UI for application that draws a histogram
ui <- fluidPage(
# Application title
titlePanel("Old Faithful Geyser Data"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates'),
actionButton('go', 'Go')
),
# Show a plot of the generated distribution
mainPanel(
DT::dataTableOutput('results')
)
)
)
# Define server logic required to draw a histogram
server <- function(input, output, session) {
output$candidates <- DT::renderDataTable(candidates, options = list(pagelength = 10))
observeEvent(input$go, {
output$results <- renderDataTable({
Awards <- candidates[sample(candidates$Phone,1),]
results <- rbind(results,Awards)})
})
results <- results
}
# Run the application
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("解螺旋锦鲤"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates'),
actionButton('go', 'Go')
),
# Show a plot of the generated distribution
mainPanel(
DT::dataTableOutput('results')
)
)
)
server <- function(input, output, session) {
output$candidates <- DT::renderDataTable(candidates, options = list(pagelength = 10))
observeEvent(input$go, {
output$results <- renderDataTable({
Awards <- candidates[sample(candidates$Phone,1),]
results <- rbind(results,Awards)})
})
results <- results
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates)
observeEvent(input$go, {
output$results <- renderDataTable({
Awards <- candidates[sample(candidates$Phone,1),]
results <- rbind(results,Awards)})
})
results <- results
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("解螺旋锦鲤"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates'),
actionButton('go', 'Go')
),
# Show a plot of the generated distribution
mainPanel(
DT::dataTableOutput('results')
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates)
observeEvent(input$go, {
output$results <- renderDataTable({
Awards <- candidates[sample(candidates$Phone,1),]
results <- rbind(results,Awards)})
})
results <- results
}
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("解螺旋锦鲤"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
# Show a plot of the generated distribution
mainPanel(
submitButton('go', '抽大奖'),
DT::dataTableOutput('results')
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates)
observeEvent(input$go, {
output$results <- renderDataTable({
Awards <- candidates[sample(candidates$Phone,1),]
results <- rbind(results,Awards)})
})
results <- results
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates)
observeEvent(input$go, {
output$results <- renderDataTable({
Awards <- candidates[sample(candidates$Phone,1),]
candidates <- candidates[-match(awards$Phone, candidates$Phone),]
results <- rbind(results,Awards)})
})
results <- results
}
shinyApp(ui = ui, server = server)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates)
observeEvent(input$go, {
output$results <- renderDataTable({
results <- data.frame(Name = NULL, Phone = NULL)
Awards <- candidates[sample(candidates$Phone,1),]
candidates <- candidates[-match(awards$Phone, candidates$Phone),]
results <- rbind(results,Awards)})
})
results <- results
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
# Application title
titlePanel("解螺旋锦鲤"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
# Show a plot of the generated distribution
mainPanel(
submitButton('go', '抽大奖'),
dataTableOutput('results')
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates)
observeEvent(input$go, {
output$results <- renderDataTable({
results <- data.frame(Name = NULL, Phone = NULL)
Awards <- candidates[sample(candidates$Phone,1),]
candidates <- candidates[-match(awards$Phone, candidates$Phone),]
results <- rbind(results,Awards)})
})
results <- results
}
shinyApp(ui = ui, server = server)
install.packages('shinyjs')
install.packages('shinyjs')
