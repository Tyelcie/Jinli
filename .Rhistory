dataTableOutput('candidates')
),
mainPanel(
tabsetPanel(
tabPanel(title = '抽奖',
actionButton('new', '抽大奖'),
actionButton('refresh', '再来一个'),
actionButton('final', '最终结果'),
plotOutput('award')),
tabPanel(title = '结果',
dataTableOutput('results_table'))
)
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list(pageLength = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
AddResults(id)
output$award <- renderPlot({
ggplot(temp) +
geom_text(aes(label = temp$Phone, x = 0.5, y = 0.5), size = 12)+
theme_void()
})
observeEvent(input$refresh,{
session$reload()
})
output$results_table <- renderDataTable(results)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
mainPanel(
tabsetPanel(
tabPanel(title = '抽奖',
plotOutput('award')),
actionButton('new', '抽大奖'),
actionButton('refresh', '再来一个'),
tabPanel(title = '结果',
dataTableOutput('results_table'))
)
)
)
)
source('helper.R')
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
mainPanel(
tabsetPanel(
tabPanel(title = '抽奖',
plotOutput('award')),
actionButton('new', '抽大奖'),
actionButton('refresh', '再来一个'),
tabPanel(title = '结果',
dataTableOutput('results_table'))
)
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list(pageLength = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
AddResults(id)
output$award <- renderPlot({
ggplot(temp) +
geom_text(aes(label = temp$Phone, x = 0.5, y = 0.5), size = 12)+
theme_void()
})
observeEvent(input$refresh,{
session$reload()
})
output$results_table <- renderDataTable(results)
})
}
shinyApp(ui = ui, server = server)
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
mainPanel(
tabsetPanel(
tabPanel(title = '抽奖',
plotOutput('award'),
actionButton('new', '抽大奖'),
actionButton('refresh', '再来一个')),
tabPanel(title = '结果',
dataTableOutput('results_table'))
)
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list(pageLength = 10))
observeEvent(input$new, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
AddResults(id)
output$award <- renderPlot({
ggplot(temp) +
geom_text(aes(label = temp$Phone, x = 0.5, y = 0.5), size = 12)+
theme_void()
})
observeEvent(input$refresh,{
session$reload()
})
output$results_table <- renderDataTable(results)
})
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
install.packages('gganimate')
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates')
),
mainPanel(
tabsetPanel(
tabPanel(title = '抽奖',
plotOutput('award'),
actionButton('normal', '抽小奖'),
actionButton('refresh', '再来一个'),
actionButton('special', '抽大奖')),
tabPanel(title = '结果',
dataTableOutput('results_normal'),
dataTableOutput('results_special'))
)
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list(pageLength = 10))
observeEvent(input$normal, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
AddNormal(id)
output$award <- renderPlot({
ggplot(temp) +
geom_text(aes(label = temp$Phone, x = 0.5, y = 0.5), size = 12)+
theme_void()
})
})
observeEvent(input$special, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
AddSpecial(id)
output$award <- renderPlot({
ggplot(temp) +
geom_text(aes(label = temp$Phone, x = 0.5, y = 0.5), size = 12)+
theme_void()
})
})
observeEvent(input$refresh,{
session$reload()
})
output$results_normal <- renderDataTable(normal)
output$results_special <- renderDataTable(special)
}
shinyApp(ui = ui, server = server)
install.packages('gganimate')
install.packages('gganimate')
install.packages(devt\)
install.packages("devtools")
devtools::install_github("dgrtwo/gganimate"
devtools::install_github("dgrtwo/gganimate")
library(gganimate)
ggplot(rbind(temp,candidates[sample(candidates$ID, 20),]), aes(frame = ID, x = 0.5, y = 0.5)) +
geom_text(aes(label = temp$Phone), size = 12)+
theme_void()
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
AddNormal(id)
output$award <- renderPlot({
ggplot(rbind(temp,candidates[sample(candidates$ID, 20),]), aes(frame = ID, x = 0.5, y = 0.5)) +
geom_text(aes(label = temp$Phone), size = 12)+
theme_void()
})
ggplot(rbind(temp,candidates[sample(candidates$ID, 20),]), aes(frame = ID, x = 0.5, y = 0.5)) +
geom_text(aes(label = temp$Phone), size = 12)+
theme_void()
gganimate(ggplot(rbind(temp,candidates[sample(candidates$ID, 20),]), aes(frame = ID, x = 0.5, y = 0.5)) +
geom_text(aes(label = temp$Phone), size = 12)+
theme_void())
library(gganimate)
gganimate(ggplot(rbind(temp,candidates[sample(candidates$ID, 20),]), aes(frame = ID, x = 0.5, y = 0.5)) +
geom_text(aes(label = temp$Phone), size = 12)+
theme_void())
p <- ggplot(rbind(temp,candidates[sample(candidates$ID, 20),]), aes(frame = ID, x = 0.5, y = 0.5)) +
geom_text(aes(label = temp$Phone), size = 12)+
theme_void()
p
gganimate(p)
gganimate::animate(p)
animate(p)
ggplot(rbind(temp,candidates[sample(candidates$ID, 20),]), aes(frame = ID, x = 0.5, y = 0.5)) +
geom_text(aes(label = temp$Phone), size = 12)+
theme_void()+
transition_time(ID)
ggplot(rbind(temp,candidates[sample(candidates$ID, 20),]), aes(frame = ID, x = 0.5, y = 0.5)) +
geom_text(aes(label = temp$Phone), size = 12)+
theme_void()+
transition_manual(ID)
animate(p)
p <- ggplot(rbind(temp,candidates[sample(candidates$ID, 20),]), aes(frame = ID, x = 0.5, y = 0.5)) +
geom_text(aes(label = temp$Phone), size = 12)+
theme_void()+
transition_manual(ID)
animate(p)
animate(p)
ggplot(rbind(temp,candidates[sample(candidates$ID, 20),]), aes(frame = ID, x = 0.5, y = 0.5)) +
geom_text(aes(label = temp$Phone), size = 12)+
theme_void()+
transition_manual(ID)
ggplot(rbind(temp,candidates[sample(candidates$ID, 20),]), aes(frame = ID, x = 0.5, y = 0.5)) +
geom_text(aes(label = temp$Phone), size = 12)+
theme_void()+
transition_manual(ID)
devtools::install_github('thomasp85/gganimate')
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_boxplot() +
# Here comes the gganimate code
transition_states(
gear,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_boxplot()
server <- function(input, output, session) {
formData <- reactive({
sapply(names(GetTableMetadata()$fields), function(x) input[[x]])
})
output$candidates <- renderDataTable(candidates, options = list(pageLength = 10))
observeEvent(input$normal, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(formData())
AddNormal(id)
output$award <- renderPlot({
ggplot(rbind(temp,candidates[sample(candidates$ID, 20),]), aes(frame = ID, x = 0.5, y = 0.5)) +
geom_text(aes(label = temp$Phone), size = 12)+
theme_void()
})
})
observeEvent(input$special, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
AddSpecial(id)
output$award <- renderPlot({
ggplot(temp) +
geom_text(aes(label = temp$Phone, x = 0.5, y = 0.5), size = 12)+
theme_void()
})
})
observeEvent(input$refresh,{
session$reload()
})
output$results_normal <- renderDataTable(normal, options = list(pageLength = 10))
output$results_special <- renderDataTable(special, options = list(pageLength = 10))
}
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates'), width = 300
),
mainPanel(
tabsetPanel(
tabPanel(title = '抽奖',
plotOutput('award'),
actionButton('normal', '抽小奖'),
actionButton('refresh', '再来一个'),
actionButton('special', '抽大奖')),
tabPanel(title = '结果',
titlePanel('小奖'),
dataTableOutput('results_normal'),
titlePanel('大奖'),
dataTableOutput('results_special'))
)
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list(pageLength = 15, searching = FALSE))
observeEvent(input$normal, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
AddNormal(id)
output$award <- renderPlot({
ggplot(rbind(temp,candidates[sample(candidates$ID, 20),]), aes(frame = ID, x = 0.5, y = 0.5)) +
geom_text(aes(label = temp$Phone), size = 12)+
theme_void()
})
})
observeEvent(input$special, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
AddSpecial(id)
output$award <- renderPlot({
ggplot(temp) +
geom_text(aes(label = temp$Phone, x = 0.5, y = 0.5), size = 12)+
theme_void()
})
})
observeEvent(input$refresh,{
session$reload()
})
output$results_normal <- renderDataTable(normal, options = list(pageLength = 10, searching = FALSE))
output$results_special <- renderDataTable(special, options = list(pageLength = 10, searching = FALSE))
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
ggplot(mtcars, aes(factor(cyl), mpg)) +
geom_boxplot() +
# Here comes the gganimate code
transition_states(
gear,
transition_length = 2,
state_length = 1
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out')
runApp()
runApp()
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates'), width = 3
),
mainPanel(
tabsetPanel(
tabPanel(title = '抽奖',
plotOutput('award'),
tags$hr(),
actionButton('normal', '抽小奖'),
actionButton('refresh', '再来一个'),
actionButton('special', '抽大奖')),
tabPanel(title = '结果',
tags$br()
titlePanel('小奖'),
dataTableOutput('results_normal'),
tags$hr(),
titlePanel('大奖'),
dataTableOutput('results_special'))
)
)
)
)
ui <- fluidPage(
titlePanel("解螺旋锦鲤"),
sidebarLayout(
sidebarPanel(
dataTableOutput('candidates'), width = 3
),
mainPanel(
tabsetPanel(
tabPanel(title = '抽奖',
plotOutput('award'),
tags$hr(),
actionButton('normal', '抽小奖'),
actionButton('refresh', '再来一个'),
actionButton('special', '抽大奖')),
tabPanel(title = '结果',
tags$br(),
titlePanel('小奖'),
dataTableOutput('results_normal'),
tags$hr(),
titlePanel('大奖'),
dataTableOutput('results_special'))
)
)
)
)
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list(pageLength = 15, searching = FALSE))
observeEvent(input$normal, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
AddNormal(id)
output$award <- renderPlot({
ggplot(rbind(temp,candidates[sample(candidates$ID, 20),]), aes(frame = ID, x = 0.5, y = 0.5)) +
geom_text(aes(label = temp$Phone), size = 12)+
theme_void()
})
})
observeEvent(input$special, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
AddSpecial(id)
output$award <- renderPlot({
ggplot(temp) +
geom_text(aes(label = temp$Phone, x = 0.5, y = 0.5), size = 12)+
theme_void()
})
})
observeEvent(input$refresh,{
session$reload()
})
output$results_normal <- renderDataTable(normal, options = list(pageLength = 10, searching = FALSE))
output$results_special <- renderDataTable(special, options = list(pageLength = 10, searching = FALSE))
}
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
server <- function(input, output, session) {
output$candidates <- renderDataTable(candidates, options = list(pageLength = 15, searching = FALSE))
observeEvent(input$normal, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
AddNormal(id)
output$award <- renderPlot({
ggplot(temp) +
geom_text(aes(label = temp$Phone, x = 0.5, y = 0.5), size = 12)+
theme_void()
})
})
observeEvent(input$special, {
id <- sample(candidates$ID, 1)
temp <- candidates[id,]
DeleteData(id)
AddSpecial(id)
output$award <- renderPlot({
ggplot(temp) +
geom_text(aes(label = temp$Phone, x = 0.5, y = 0.5), size = 12)+
theme_void()
})
})
observeEvent(input$refresh,{
session$reload()
})
output$results_normal <- renderDataTable(normal, options = list(pageLength = 10, searching = FALSE))
output$results_special <- renderDataTable(special, options = list(pageLength = 10, searching = FALSE))
}
shinyApp(ui = ui, server = server)
runApp()
View(normal)
runApp()
View(normal)
runApp()
View(normal)
runApp()
View(normal)
runApp()
View(normal)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
